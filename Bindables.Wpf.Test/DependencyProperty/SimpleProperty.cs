using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Wpf.Test.DependencyProperty;

[TestFixture]
public class SimpleProperty : WpfTestBase
{
	private const string SourceCode = @"
using System.Windows;
using Bindables.Wpf;

public partial class WpfClass : DependencyObject
{
    private static readonly string DefaultValue = ""Test"";

	[DependencyProperty(typeof(int))]
	public static readonly DependencyProperty Example1Property;

	[DependencyProperty(typeof(int), OnPropertyChanged = nameof(PropertyChangedCallback))]
	public static readonly DependencyProperty Example2Property;

	[DependencyProperty(typeof(string), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example3Property;

	[DependencyProperty(typeof(string), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example4Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example5Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example6Property;

    private static void PropertyChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args)
    {
    }
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using System.Windows;

public partial class WpfClass
{
    public int Example1
    {
        get => (int)GetValue(Example1Property);
        set => SetValue(Example1Property, value);
    }

    public int Example2
    {
        get => (int)GetValue(Example2Property);
        set => SetValue(Example2Property, value);
    }

    public string Example3
    {
        get => (string)GetValue(Example3Property);
        set => SetValue(Example3Property, value);
    }

    public string Example4
    {
        get => (string)GetValue(Example4Property);
        set => SetValue(Example4Property, value);
    }

    public string Example5
    {
        get => (string)GetValue(Example5Property);
        set => SetValue(Example5Property, value);
    }

    public string Example6
    {
        get => (string)GetValue(Example6Property);
        set => SetValue(Example6Property, value);
    }

    static WpfClass()
    {
        Example1Property = DependencyProperty.Register(
            nameof(Example1),
            typeof(int),
            typeof(WpfClass),
            new PropertyMetadata());
        
        Example2Property = DependencyProperty.Register(
            nameof(Example2),
            typeof(int),
            typeof(WpfClass),
            new PropertyMetadata(PropertyChangedCallback));
        
        Example3Property = DependencyProperty.Register(
            nameof(Example3),
            typeof(string),
            typeof(WpfClass),
            new PropertyMetadata(DefaultValue));
        
        Example4Property = DependencyProperty.Register(
            nameof(Example4),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(default, (FrameworkPropertyMetadataOptions)256));
        
        Example5Property = DependencyProperty.Register(
            nameof(Example5),
            typeof(string),
            typeof(WpfClass),
            new PropertyMetadata(DefaultValue, PropertyChangedCallback));
        
        Example6Property = DependencyProperty.Register(
            nameof(Example6),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, (FrameworkPropertyMetadataOptions)256, PropertyChangedCallback));
        
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<DependencyPropertyGenerator>(SourceCode);
		CheckResult(result);

		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}